// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// updateLogTauF
arma::mat updateLogTauF(arma::mat& data1, arma::mat& data2, arma::vec& tauVec, arma::mat& alphaMtx1, arma::mat& alphaMtx2, arma::vec& bVec, int J, int K);
RcppExport SEXP _BREMSC_updateLogTauF(SEXP data1SEXP, SEXP data2SEXP, SEXP tauVecSEXP, SEXP alphaMtx1SEXP, SEXP alphaMtx2SEXP, SEXP bVecSEXP, SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data2(data2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaMtx1(alphaMtx1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaMtx2(alphaMtx2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLogTauF(data1, data2, tauVec, alphaMtx1, alphaMtx2, bVec, J, K));
    return rcpp_result_gen;
END_RCPP
}
// updateZmtx
arma::mat updateZmtx(arma::mat& taufMtxLog, int J, int K);
RcppExport SEXP _BREMSC_updateZmtx(SEXP taufMtxLogSEXP, SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type taufMtxLog(taufMtxLogSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(updateZmtx(taufMtxLog, J, K));
    return rcpp_result_gen;
END_RCPP
}
// updateNjVec
arma::rowvec updateNjVec(arma::mat& zMtx);
RcppExport SEXP _BREMSC_updateNjVec(SEXP zMtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type zMtx(zMtxSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNjVec(zMtx));
    return rcpp_result_gen;
END_RCPP
}
// updateTauVec
arma::rowvec updateTauVec(arma::rowvec njVec, int K);
RcppExport SEXP _BREMSC_updateTauVec(SEXP njVecSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type njVec(njVecSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTauVec(njVec, K));
    return rcpp_result_gen;
END_RCPP
}
// getLogL
double getLogL(arma::mat& zMtx, arma::mat& taufMtxLog, arma::vec& bVec, double sigmaB);
RcppExport SEXP _BREMSC_getLogL(SEXP zMtxSEXP, SEXP taufMtxLogSEXP, SEXP bVecSEXP, SEXP sigmaBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type zMtx(zMtxSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type taufMtxLog(taufMtxLogSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaB(sigmaBSEXP);
    rcpp_result_gen = Rcpp::wrap(getLogL(zMtx, taufMtxLog, bVec, sigmaB));
    return rcpp_result_gen;
END_RCPP
}
// updateAlphaMtxOne
arma::mat updateAlphaMtxOne(arma::mat& data0, arma::vec& z, arma::mat& alphaMtx, double sd_alpha, arma::vec& bVec, int K, int P);
RcppExport SEXP _BREMSC_updateAlphaMtxOne(SEXP data0SEXP, SEXP zSEXP, SEXP alphaMtxSEXP, SEXP sd_alphaSEXP, SEXP bVecSEXP, SEXP KSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data0(data0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaMtx(alphaMtxSEXP);
    Rcpp::traits::input_parameter< double >::type sd_alpha(sd_alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAlphaMtxOne(data0, z, alphaMtx, sd_alpha, bVec, K, P));
    return rcpp_result_gen;
END_RCPP
}
// updateBMtxOne
arma::vec updateBMtxOne(arma::mat& data1, arma::mat& data2, arma::vec& z, arma::vec& tauVec, arma::mat& alphaMtx1, arma::mat& alphaMtx2, double sdB, arma::vec& bVec, double sigmaB, int J, int K);
RcppExport SEXP _BREMSC_updateBMtxOne(SEXP data1SEXP, SEXP data2SEXP, SEXP zSEXP, SEXP tauVecSEXP, SEXP alphaMtx1SEXP, SEXP alphaMtx2SEXP, SEXP sdBSEXP, SEXP bVecSEXP, SEXP sigmaBSEXP, SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data2(data2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaMtx1(alphaMtx1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphaMtx2(alphaMtx2SEXP);
    Rcpp::traits::input_parameter< double >::type sdB(sdBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaB(sigmaBSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBMtxOne(data1, data2, z, tauVec, alphaMtx1, alphaMtx2, sdB, bVec, sigmaB, J, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BREMSC_updateLogTauF", (DL_FUNC) &_BREMSC_updateLogTauF, 8},
    {"_BREMSC_updateZmtx", (DL_FUNC) &_BREMSC_updateZmtx, 3},
    {"_BREMSC_updateNjVec", (DL_FUNC) &_BREMSC_updateNjVec, 1},
    {"_BREMSC_updateTauVec", (DL_FUNC) &_BREMSC_updateTauVec, 2},
    {"_BREMSC_getLogL", (DL_FUNC) &_BREMSC_getLogL, 4},
    {"_BREMSC_updateAlphaMtxOne", (DL_FUNC) &_BREMSC_updateAlphaMtxOne, 7},
    {"_BREMSC_updateBMtxOne", (DL_FUNC) &_BREMSC_updateBMtxOne, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_BREMSC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
